package it.cwmp.client.controller.actors.view

import it.cwmp.client.controller.actors.messages.AuthenticationRequests.{LogIn, SignUp}
import it.cwmp.client.controller.actors.view.AuthenticationViewActor._
import it.cwmp.client.view.authentication.{AuthenticationFXController, AuthenticationStrategy}

/**
  * Actor assigned to the management of the display of the authentication screen and of the events generated by it.
  *
  * @author Elia Di Pasquale
  * @author contributor Enrico Siboni
  */
case class AuthenticationViewActor() extends FXServiceViewActor {

  protected var fxController: AuthenticationFXController = _

  override def preStart(): Unit = {
    super.preStart()
    runOnUIThread(() =>
      fxController = AuthenticationFXController(new AuthenticationStrategy {
        override def performLogIn(username: String, password: String): Unit = {
          fxController disableViewComponents()
          fxController showLoading LOGGING_IN_MESSAGE
          controllerActor ! LogIn(username, password)
        }

        override def performPasswordCheck(password: String, confirmPassword: String): Boolean =
          password == confirmPassword

        override def performSignUp(username: String, password: String): Unit = {
          fxController disableViewComponents()
          fxController showLoading SIGNING_UP_MESSAGE
          controllerActor ! SignUp(username, password)
        }
      }))
  }
}

/**
  * Companion object
  */
object AuthenticationViewActor {
  private val LOGGING_IN_MESSAGE = "Log-in in corso..."
  private val SIGNING_UP_MESSAGE = "Registrazione in corso..."
}
